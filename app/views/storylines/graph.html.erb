<h2 class="floating_header"><%= link_to "Storeys", storylines_path %></h2>

<div id="viz_wrapper"></div>

<%= javascript_include_tag "d3mod" %>

<script>
var isiPad = navigator.userAgent.match(/iPad/i) != null;

function d3viz() {
  
  //
  // Add/Edit Nodes
  //
  var activeNode = null;
  $().ready(function() {  
    $('#edit_dialog').hide();
    $('#edit_dialog_button').click(function() {
      if (activeNode.dashed) {
        jnodes.push({"name": $('#edit_dialog_text').val(), "group": jnodes[activeNode.parentIndex].group+1, "stroke": 2});
        var nodeIndex = jnodes.length - 1;
        jlinks.push({"source": activeNode.parentIndex, "target": nodeIndex, "value":1});
        jnodes.push({"name": "+", "group": jnodes[activeNode.parentIndex].group+1, "stroke": 2, "parentIndex": nodeIndex, "dashed": true});
        jlinks.push({"source": nodeIndex, "target": jnodes.length-1, "value": 1});
        // Update
        $.post("<%= graph_add_storylines_path %>",
          { "parent_id": jnodes[activeNode.parentIndex].real_id, "line": $('#edit_dialog_text').val() },
          function(data) {
            lastIndex = nodeIndex;
            for(var i = 0; i < data.lines.length; i++) {
              if (i == 0) { // Update initial added node
                jnodes[nodeIndex].name = data.lines[0];
                jnodes[nodeIndex].real_id = data.ids[0];
              }
              else { // Add child nodes, plus signs, and edges
                jnodes.push({"name": data.lines[i], "group": jnodes[lastIndex].group+1, "stroke": 2, "real_id": data.ids[i]});
                var newIndex = jnodes.length - 1;
                jlinks.push({"source": lastIndex, "target": newIndex, "value":1});
                jnodes.push({"name": "+", "group": jnodes[lastIndex].group+1, "stroke": 2, "parentIndex": newIndex, "dashed": true});
                jlinks.push({"source": newIndex, "target": jnodes.length-1, "value": 1});
                lastIndex = newIndex;
              }
            }
            // Only redraw graph if new items were added
            if (!(data.lines[0] == $('#edit_dialog_text').val() && data.lines.length == 1)) {
              supdate();
            }
          }, "json");
      }
      else{
        activeNode.name = $('#edit_dialog_text').val();
        // Update
        $.post("<%= graph_update_storylines_path %>",
          { "id": activeNode.real_id, "line": $('#edit_dialog_text').val() },
          function(data) { } );
      }
      $('#edit_dialog').hide();
      supdate();
    });
  });
  function openEditDialog(d) {
    activeNode = d;
    if (activeNode.dashed) {
      $('#edit_dialog_button').val("Add");
      $('#edit_dialog_text').val("");   
    }
    else {
      $('#edit_dialog_button').val("Edit");
      $('#edit_dialog_text').val(d.name);    
    }
    $('#edit_dialog').show();
    dialog_count = 0;
    $(document).bind('click.graph_dialog', function(e) {
      if (!$(e.target).parents().hasClass('edit_dialog') && dialog_count > 0) {
        $('#edit_dialog').hide();
        $(document).unbind('click.graph_dialog');
      }
      dialog_count++;
    });
  }

  //
  // D3 Starts Here! Original code courtesy of http://bl.ocks.org/1846692
  //
  var w = 1280,
      h = 720,
      color = d3.scale.category20(),
      jnodes, jlinks,
      link, node,
      nodeCircles, nodePaths, linkObjs;
  
  var vis = d3.select("#viz_wrapper").append("svg:svg")
      .attr("width", "100%")
      .attr("height", "100%");

  // Pan and Zoom http://groups.google.com/group/d3-js/browse_thread/thread/346e75ba083fba4b
  var scaly = 1.0;
  var zoomy = d3.behavior.zoom()
    .xExtent(function() { range = d3.extent(jnodes, function(d) { return d.x }); return [range[1]-range[0], $('svg').width()]; } )
    .yExtent(function() { range = d3.extent(jnodes, function(d) { return d.y }); return [range[1]-range[0], $('svg').height()]; } )
    .scaleExtent([1.0/16, 8])
    .on("zoom", function() {
      vis.attr("transform", "translate(" + d3.event.translate + 
        ")scale(" + d3.event.scale + ")");
      scaly = d3.event.scale;
    });
  $().ready(function() {
    $('#recenter').live('click', function() {
      xlate = [(-jnodes[0].x)*scaly + $('svg').width()/2, (-jnodes[0].y)*scaly + $('svg').height()/2];
      vis.attr("transform", "translate("+xlate+")scale(" + scaly + ")");
      zoomy.translate(xlate);
    });
  });
  vis.append("rect") 
    .attr("width", "100%") 
    .attr("height", "100%") 
    .attr("fill", "#fcfcfc") 
    .call(zoomy);
  vis = vis.append("g");

  // Force Layout
  var force = self.force = d3.layout.force()
    .gravity(.05)
    .distance(function(d) { return 100 * d.value })
    .charge(function(d) { if (d.dashed) return -5000; else return -5000/(d.group/2+1); })
    .size([w, h]);
  force.on("tick", function() {
    link.attr("x1", function(d) { return d.source.x; })
        .attr("y1", function(d) { return d.source.y; })
        .attr("x2", function(d) { return d.target.x; })
        .attr("y2", function(d) { return d.target.y; });
    node.attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });
  });

  // Ajax Call
  d3.json("<%= storyline_path(@storyline, :format => 'json') %>", function(json) {
    jnodes = json.nodes;
    jlinks = json.links;
    supdate();
  });

  function supdate() {
    force.nodes(jnodes).links(jlinks).start(); // Restart force layout

    // Link Additions
    linkObjs = vis.selectAll("line.link")
      .data(jlinks)
      .enter().insert("svg:line", ":first-child");
    linkUpdateHelper();
    vis.selectAll("line.link").data(jlinks).exit().remove();
  
    // Link Updates
    linkObjs = vis.selectAll("line.link")
      .data(jlinks)
      .selectAll("line");
    linkUpdateHelper();

    // Node Additions
    node = vis.selectAll("g.node")
      .data(jnodes)
      .enter().append("svg:g")
      .attr("class", "node")
      .call(force.drag);
    nodeCircles = node.append("circle");
    nodePaths = node.append("path");
    updateHelper();
    vis.selectAll("g.node").data(jnodes).exit().remove();
  
    // Node Updates
    node = vis.selectAll("g.node")
      .data(jnodes).call(force.drag);
    nodeCircles = node.selectAll("circle");
    nodePaths = node.selectAll("path");
    updateHelper();

    link = vis.selectAll("line.link");  
    node = vis.selectAll("g.node");
  }

  function linkUpdateHelper() {
    linkObjs.attr("class", "link")
      .attr("x1", function(d) { return d.source.x; })
      .attr("y1", function(d) { return d.source.y; })
      .attr("x2", function(d) { return d.target.x; })
      .attr("y2", function(d) { return d.target.y; });
  }

  function updateHelper() {
    // Set Circle
    nodeCircles
      .attr("class", "circle")
      .attr("r", 50)
      .attr("fill", "white")
      .attr("stroke", function(d) { return color(d.group); })
      .attr("stroke-width", function(d) { return d.stroke+"px"; })
      .attr("stroke-dasharray", function(d) { if (d.dashed) return "5 3"; } );
    if (isiPad) {
      nodeCircles.on("touchend", openEditDialog);
    }
    else {
      nodeCircles.on("click", openEditDialog);
    }
  
    node.selectAll("text").remove(); // Clear all existing text
  
    // Set Text
    node.each(function(d) {
      var curr = d3.select(this);
      var words = d.name.replace(/^\s+|\s+$/g,"").split(" ");
      var lineArray = [];
      var numWords = Math.sqrt(words.length) | 0 + 1;
      var numLines = Math.ceil(words.length / numWords);
      var fontSize = 16;
      var yOffset = -numLines*fontSize/2;
      if (d.dashed) {
        fontSize = 24;
        yOffset -= 9;
      }
      var textElt = curr.append("svg:text")
       .attr("class", "nodetext")
       .attr("dx", 0).attr("y", yOffset+"px")
       .attr("text-anchor", "middle")
       .style("font-size", fontSize+"px");
      var index = 0;
      while(index < words.length) {
       var tempWords = "";
       for (var j = 0; j < numWords; j++) {
         if (j + index < words.length) {
           tempWords += words[j+index]+" ";
         }
       }
       var tempNode = textElt.append("svg:tspan").text(tempWords).attr("dy", "1em").attr("x", 0);
       index += numWords;
      }
      d.radius = Math.max(textElt.node().getBBox().width, textElt.node().getBBox().height) / 2 + 8;
    });
   
    // Set Real Radius (can only do this after we've determined how large the text box is)
    node.selectAll("circle").attr("r", function(d) { return d.radius; } );
   
    // Set Arc
    nodePaths
      .attr("d", d3.svg.arc()
       .innerRadius(function(d) { if (d.age) return d.radius+d.stroke+1; else return 0; })
       .outerRadius(function(d) { if (d.age) return d.radius+d.stroke+3; else return 0; })
       .startAngle(0).endAngle(function(d) { if (d.age) return Math.max(0, 1-d.age)*2*Math.PI; else return 0; }))
      .style("fill", function(d) { return color(d.group); })
      .style("stroke", function(d) { return color(d.group); });
  }
}
d3viz();
</script>

<div id="edit_dialog" class="edit_dialog">
  <div>
    <form>
    <textarea id="edit_dialog_text"></textarea><br />
    <input type="button" id="edit_dialog_button" value="Edit" />
    </form>
  </div>
</div>

<footer class="floating_footer">
  <%= link_to 'Back', storylines_path %> · 
  <a id="recenter" href="#">Re-center</a> · 
  <%= link_to 'Story View', @storyline %>
</footer>